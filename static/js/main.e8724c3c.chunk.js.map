{"version":3,"sources":["components/Layouts/MyHeader.js","components/Layouts/Footer.js","components/Content/NativeDateTimePicker.js","components/Content/TimestampInput.js","components/Content/BlockDisplay.js","components/Content/BlockContainer.js","components/Content/SelectorContainer.js","components/Content/IpfsInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["MyHeader","props","Header","block","as","textAlign","Content","Subheader","Footer","Segment","basic","Grid","columns","centered","Row","Column","width","Divider","fitted","List","horizontal","floated","Item","style","fontSize","pkg","version","Button","href","size","circular","icon","Icon","name","NativeDateTimePicker","selectedTimestamp","handleDateChange","useState","timestamp","setTimestamp","valid","setValid","errorMessage","setErrorMessage","useEffect","minDateTime","fromUnixTime","Form","error","Field","selected","showTimeInput","showYearDropdown","dateFormat","timeFormat","minDate","onChange","newDate","newTimestamp","getUnixTime","Date","Message","content","TimestampInput","handleTimestampChange","Input","type","placeholder","min","value","event","newTimeStamp","parseInt","target","BlockDisplay","height","hash","loading","diff","Card","fluid","Placeholder","Line","length","Meta","Paragraph","Description","extra","className","color","disabled","message","wordWrap","format","Popup","trigger","compact","Image","src","GET_BLOCK","gql","BlockContainer","useQuery","variables","data","SelectorContainer","showTimestampInput","setSelectedTimestamp","stackable","verticalAlign","defaultProps","IpfsInfo","activeIndex","setActiveIndex","showDetails","setShowDeteails","handleClick","e","titleProps","index","onClick","cursor","display","rel","Accordion","styled","uri","description","map","entry","Fragment","key","Title","active","Group","App","Container","marginTop","Boolean","window","location","hostname","match","client","ApolloClient","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8724c3c.chunk.js","sourcesContent":["import React from 'react'\nimport {Header} from 'semantic-ui-react'\n\n\nfunction MyHeader(props) {\n    return (\n        <Header block as='h1' textAlign='center'>\n            <Header.Content>Blocktimer</Header.Content>\n            <Header.Subheader>Find Ethereum blocks by date/time or unix timestamp</Header.Subheader>\n        </Header>\n    )\n}\n\nexport default MyHeader","import pkg from '../../../package.json'\nimport React from 'react'\nimport {Button, Divider, Grid, Icon, List, Segment} from 'semantic-ui-react'\n\n\nfunction Footer() {\n    return (\n        <Segment basic>\n        <Grid columns={12} centered>\n            <Grid.Row>\n                <Grid.Column width={12} textAlign={'center'}>\n                    <Divider fitted></Divider>\n                    <List horizontal floated={'right'}>\n                        <List.Item >\n                            <span style={{fontSize: '0.5rem'}}>v {pkg.version}</span>\n                        </List.Item>\n                    </List>\n                    <List horizontal>\n                        <List.Item>\n                            <Button\n                                as='a'\n                                href={'https://github.com/TripleSpeeder/blocktimer'}\n                                size='tiny'\n                                circular\n                                icon='github'/>\n                        </List.Item>\n                        <List.Item>\n                            <Button\n                                as='a'\n                                href={'mailto:michael@m-bauer.org'}\n                                size='tiny'\n                                circular\n                                icon='mail'\n                            />\n                        </List.Item>\n                        <List.Item>\n                            <span style={{fontSize: '0.7rem'}}><Icon name={'copyright'}/> Michael Bauer</span>\n                        </List.Item>\n                    </List>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        </Segment>\n    )\n}\n\nexport default Footer","import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {Form, Message} from 'semantic-ui-react'\nimport getUnixTime from 'date-fns/getUnixTime'\nimport fromUnixTime from 'date-fns/fromUnixTime'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nconst NativeDateTimePicker = ({selectedTimestamp, handleDateChange}) => {\n    const [timestamp, setTimestamp] = useState(selectedTimestamp)\n    const [valid, setValid] = useState(true)\n    const [errorMessage, setErrorMessage] = useState()\n\n    // use useEffect hook to update state variable when props change\n    useEffect(()=>{\n        setTimestamp(selectedTimestamp)\n        // assume that date coming in via props is always valid. Is this secure?\n        setValid(true)\n    }, [selectedTimestamp])\n\n    const minTimeStamp = 1438269988\n    const minDateTime = fromUnixTime(minTimeStamp)\n\n    const handleChange = (newDate) => {\n        const newTimestamp = getUnixTime(newDate)\n        setTimestamp(newTimestamp)\n        if (newTimestamp < minTimeStamp) {\n            setValid(false)\n            setErrorMessage(`Date too early. Ethereum block #1 was mined at ${minDateTime}`)\n        } else if (newTimestamp > getUnixTime(new Date())) {\n            setValid(false)\n            setErrorMessage(\"Date in future.\")\n        } else {\n            // All good!\n            setValid(true)\n            handleDateChange(newTimestamp)\n        }\n    }\n\n    return (\n        <Form error={!valid}>\n            <Form.Field>\n                <label>Date/Time:</label>\n                <DatePicker\n                    selected={fromUnixTime(timestamp)}\n                    showTimeInput\n                    showYearDropdown\n                    dateFormat=\"yyyy-MM-dd HH:mm:ss OOOO\"\n                    timeFormat=\"HH:mm:ss\"\n                    minDate={minDateTime}\n                    onChange={handleChange}\n                />\n                <Message\n                    error\n                    content={errorMessage}\n                />\n            </Form.Field>\n        </Form>\n    )\n}\n\nNativeDateTimePicker.propTypes = {\n    selectedTimestamp: PropTypes.number.isRequired,\n    handleDateChange: PropTypes.func.isRequired\n}\n\nexport default NativeDateTimePicker","import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {Form, Input, Message} from 'semantic-ui-react'\n\nconst TimestampInput = ({selectedTimestamp, handleTimestampChange}) => {\n    const minTimeStamp = 1438269988\n    const [timestamp, setTimestamp] = useState(selectedTimestamp)\n    const [valid, setValid] = useState(true)\n\n    // use useEffect hook to update state variable when props change\n    useEffect(()=>{\n        setTimestamp(selectedTimestamp)\n        // assume that timestamp coming in via props is always valid. Is this secure?\n        setValid(true)\n    }, [selectedTimestamp])\n\n    const handleChange = (event) => {\n        let newTimeStamp = parseInt(event.target.value)\n        setTimestamp(newTimeStamp)\n        if (newTimeStamp < minTimeStamp) {\n            setValid(false)\n        }\n        else {\n            setValid(true)\n            handleTimestampChange(newTimeStamp)\n        }\n    }\n\n    return (\n        <Form error={!valid}>\n            <Form.Field>\n                <label>Unix timestamp: </label>\n                <Input\n                    type={'number'}\n                    placeholder='Unix timestamp'\n                    min={123}\n                    value={timestamp}\n                    onChange={handleChange}\n                />\n                <Message\n                    error\n                    content={'Timstamp too small. Ethereum block #1 was mined at ' + minTimeStamp}\n                />\n            </Form.Field>\n        </Form>\n    )\n}\n\nTimestampInput.propTypes = {\n    selectedTimestamp: PropTypes.number.isRequired,\n    handleTimestampChange: PropTypes.func.isRequired\n}\n\nexport default TimestampInput\n","import React  from 'react'\nimport {Button, Card, Image, Placeholder, Popup} from 'semantic-ui-react'\nimport fromUnixTime from 'date-fns/fromUnixTime'\nimport format from 'date-fns/format'\n\nfunction BlockDisplay({height, hash, timestamp, loading, error, diff}) {\n\n    if (loading) {\n        return (\n            <Card fluid>\n                <Card.Content>\n                    <Card.Header>\n                        <Placeholder fluid>\n                            <Placeholder.Header>\n                                <Placeholder.Line length={'full'}/>\n                            </Placeholder.Header>\n                        </Placeholder>\n                    </Card.Header>\n                    <Card.Meta>\n                        <Placeholder fluid>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line length={'full'}/>\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Card.Meta>\n                    <Card.Description>\n                        <Placeholder fluid>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line length={'full'}/>\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                        <Button\n                            basic\n                            color={'green'}\n                            disabled\n                        >\n                            view on Etherscan.io\n                        </Button>\n                        <Button\n                            basic\n                            color={'green'}\n                            disabled\n                        >\n                            view on Etherchain.org\n                        </Button>\n                    </div>\n                </Card.Content>\n            </Card>\n        )\n    } else if (error) {\n        return (\n            <Card fluid color='red'>\n                <Card.Content>\n                    <Card.Header>\n                        Error!\n                    </Card.Header>\n                    <Card.Description>\n                        {error.message}\n                    </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                        <Button\n                            basic\n                            color={'green'}\n                            disabled\n                        >\n                            view on Etherscan.io\n                        </Button>\n                        <Button\n                            basic\n                            color={'green'}\n                            disabled\n                        >\n                            view on Etherchain.org\n                        </Button>\n                    </div>\n                </Card.Content>\n            </Card>\n        )\n    }\n\n    return (\n        <Card fluid color={'yellow'}>\n            <Card.Content>\n                <Card.Header>\n                    Block #{height}\n                </Card.Header>\n                <Card.Meta style={{wordWrap: 'break-word'}}>\n                    {hash}\n                </Card.Meta>\n                <Card.Description>\n                    Mined on {format(fromUnixTime(timestamp),\"yyyy-MM-dd HH:mm OOOO\")} (Delta: {diff} seconds)\n                </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                    <Popup\n                        trigger={\n                            <Button\n                                basic\n                                compact\n                                size='mini'\n                                href={\"https://etherscan.io/block/\" + height}\n                                target={'_blank'}\n                            >\n                                <Image\n                                    size={'mini'}\n                                    src='https://etherscan.io/images/favicon2.ico'/>\n                            </Button>\n                        }\n                        content={'Show on Etherscan.io'}\n                    />\n                    <Popup\n                        trigger={\n                            <Button\n                                compact\n                                basic\n                                size='mini'\n                                href={\"https://www.etherchain.org/block/\"+hash}\n                                target={'_blank'}\n                            >\n                                <Image\n                                    size={'mini'}\n                                    src='https://www.etherchain.org/images/favicon.png'/>\n                            </Button>\n                        }\n                        content={'Show on Etherchain.org'}\n                    />\n                    <Popup\n                        trigger={\n                            <Button\n                                basic\n                                compact\n                                size='mini'\n                                href={\"https://blockchair.com/ethereum/block/\"+height}\n                                target={'_blank'}\n                            >\n                                <Image size={'mini'} src='https://blockchair.com/favicon.ico'/>\n                            </Button>\n                        }\n                        content={'Show on blockchair.com'}\n                    />\n            </Card.Content>\n        </Card>\n    )\n}\n\nexport default BlockDisplay","import React from 'react'\nimport PropTypes from 'prop-types'\nimport gql from 'graphql-tag';\nimport {useQuery} from '@apollo/react-hooks'\nimport BlockDisplay from './BlockDisplay'\n\nconst GET_BLOCK = gql`\n  query Block($timestamp: Int, $height: Int) {\n      block(timestamp: $timestamp, height: $height) {\n        timestamp\n        height\n        hash\n      }\n  }\n`;\n\nconst BlockContainer = ({timestamp}) => {\n    const {loading, error, data} = useQuery(GET_BLOCK, {\n        variables: {\n            timestamp: timestamp,\n        },\n    })\n\n    if (loading) {\n        return <BlockDisplay loading={true}/>\n    }\n\n    if (error) {\n        return (\n            <BlockDisplay\n                error={error}\n            />\n        )\n    }\n\n    if (!data) {\n        return (<div>No block loaded</div>)\n    }\n\n    // const diff = moment.unix(data.block.timestamp).diff(moment.unix(timestamp), 'seconds')\n    const diff = timestamp - data.block.timestamp\n\n    return (\n        <BlockDisplay\n            error={error}\n            hash={data.block.hash}\n            height={data.block.height}\n            timestamp={data.block.timestamp}\n            diff={diff}\n        />\n    )\n}\n\nBlockContainer.propTypes = {\n    timestamp: PropTypes.number,\n}\n\nexport default BlockContainer","import React, {useState} from 'react'\nimport {Grid, Segment} from 'semantic-ui-react'\nimport NativeDateTimePicker from './NativeDateTimePicker'\nimport getUnixTime from 'date-fns/getUnixTime'\nimport TimestampInput from './TimestampInput'\nimport BlockContainer from './BlockContainer'\nimport PropTypes from 'prop-types'\n\nconst SelectorContainer = ({showTimestampInput}) => {\n    const [selectedTimestamp, setSelectedTimestamp] = useState(getUnixTime(new Date()))\n\n    const handleTimestampChange = (newTimestamp) => {\n        setSelectedTimestamp(newTimestamp)\n    }\n\n    if (showTimestampInput) {\n        return (\n            <Segment basic>\n            <Grid\n                stackable\n                centered\n                columns={12}\n            >\n                <Grid.Row verticalAlign={'middle'}>\n                    <Grid.Column width={6} textAlign={'center'}>\n                        <NativeDateTimePicker\n                            handleDateChange={handleTimestampChange}\n                            selectedTimestamp={selectedTimestamp}/>\n                    </Grid.Column>\n                    <Grid.Column width={6} textAlign={'center'}>\n                        <TimestampInput\n                            handleTimestampChange={handleTimestampChange}\n                            selectedTimestamp={selectedTimestamp}/>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column textAlign={'center'} width={12}>\n                        <BlockContainer timestamp={selectedTimestamp}/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </Segment>\n        )\n    } else {\n        return (\n            <Segment basic>\n            <Grid\n                centered\n                columns={12}\n            >\n                <Grid.Row verticalAlign={'middle'}>\n                    <Grid.Column width={12} textAlign={'center'}>\n                        <NativeDateTimePicker\n                            handleDateChange={handleTimestampChange}\n                            selectedTimestamp={selectedTimestamp}/>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column textAlign={'center'} width={12}>\n                        <BlockContainer timestamp={selectedTimestamp}/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </Segment>\n        )\n    }\n}\n\nSelectorContainer.propTypes = {\n    showTimestampInput: PropTypes.bool,\n}\n\nSelectorContainer.defaultProps = {\n    showTimestampInput: true\n};\n\nexport default SelectorContainer","import React, {useState} from 'react'\nimport {Accordion, Grid, Header, Icon, Item, Segment} from 'semantic-ui-react'\n\nconst IpfsInfo = () => {\n    const [activeIndex, setActiveIndex] = useState(-1)\n    const [showDetails, setShowDeteails] = useState(false)\n\n    const handleClick = (e, titleProps) => {\n        const {index} = titleProps\n        const newIndex = activeIndex === index ? -1 : index\n        setActiveIndex(newIndex)\n    }\n\n    const toggleDetails = () => {\n        setShowDeteails(!showDetails)\n    }\n\n    const listItems = [\n        {\n            type: 'IPFS + ENS',\n            uri: 'http://blocktimer.dappstar.eth/',\n            description: 'This is the recommended method if your system supports .eth name resolution. The ENS name \\n' +\n                ' is set up to point to the ipfs CID. The content hash\\n' +\n                'can be updated in the ENS system, so using this domain will always point to the latest release.',\n        },\n        {\n            type: 'Direct IPFS',\n            uri: 'ipfs://QmXHWfbbU3A3HrSuEM9HFS842Vi6r3FmkXgwv4TzgnjPR1/',\n            description: 'This works if your system supports native ipfs links. However note that the CID is static' +\n                ' and therefor is most likely not pointing to the latest release. Therefor this method is not recommended.',\n        },\n        {\n            type: 'IPFS + ENS + EthDNS',\n            uri: 'http://blocktimer.dappstar.eth.link/',\n            description: 'If your system/browser does not have direct support for .eth domains you can use the ethDNS\\n' +\n                'system by simply adding \".link\" to the ENS domain. The nameserver responsible for .link\\n' +\n                'domains will automatically look up the according content hash entry and return a gateway.ipfs.io\\n' +\n                'link to the correct address.',\n        },\n        {\n            type: 'Https',\n            uri: 'https://triplespeeder.github.io/blocktimer/',\n            description: 'Fallback traditional hosting on github pages.',\n        },\n    ]\n\n    return (\n        <Segment basic>\n        <Grid columns={12} stackable centered>\n            <Grid.Row>\n                <Grid.Column width={12} textAlign={'left'}>\n                    <Header size={'small'} onClick={toggleDetails} style={{cursor:'pointer'}}>\n                        <Icon name={showDetails ? 'caret down' : 'caret right'}/>\n                        <Header.Content>\n                            IPFS info\n                        </Header.Content>\n                    </Header>\n                    <p style={showDetails ? {} : {display: 'none'}}>This site is hosted decentralized via <a href='https://ipfs.io' target='_blank' rel='noopener noreferrer'>IPFS</a>. It can\n                        be accessed in different ways:</p>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row style={showDetails ? {} : {display: 'none'}}>\n                <Grid.Column width={12}>\n                    <Accordion styled fluid>\n                        {listItems.map((entry, index) => {\n                            return (\n                                <React.Fragment key={index}>\n                                    <Accordion.Title\n                                        active={activeIndex === index}\n                                        index={index}\n                                        onClick={handleClick}\n                                    >\n                                        <Icon name='dropdown'/>\n                                        {entry.type}\n                                    </Accordion.Title>\n                                    <Accordion.Content active={activeIndex === index}>\n                                        <Item.Group>\n                                            <Item>\n                                                <Item.Content>\n                                                    <Item.Header as={'a'} href={entry.uri} target='_blank' rel='noopener noreferrer'>\n                                                        <span style={{wordWrap: 'break-word'}}>{entry.uri}</span>\n                                                    </Item.Header>\n                                                    <Item.Description>\n                                                        {entry.description}\n                                                    </Item.Description>\n                                                </Item.Content>\n                                            </Item>\n                                        </Item.Group>\n                                    </Accordion.Content>\n                                </React.Fragment>\n                            )\n                        })}\n                    </Accordion>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        </Segment>\n    )\n}\n\n\nexport default IpfsInfo","import React from 'react'\nimport {MyHeader, Footer} from './Layouts'\nimport {Container} from 'semantic-ui-react'\nimport SelectorContainer from './Content/SelectorContainer'\nimport IpfsInfo from './Content/IpfsInfo'\n\n\nfunction App() {\n    return (\n            <Container style={{ marginTop: '1em' }}>\n                <MyHeader/>\n                <SelectorContainer/>\n                <IpfsInfo/>\n                <Footer/>\n            </Container>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n    // uri: 'http://127.0.0.1:8000/graphql/',\n    uri: 'https://blocktimer-backend.appspot.com/graphql/',\n});\n\nconst WrappedApp = () => (\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>\n);\n\n\nReactDOM.render(<WrappedApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}